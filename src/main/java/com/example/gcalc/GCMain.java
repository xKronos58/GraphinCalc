package com.example.gcalc;

import com.example.gcalc.Calculator.ConvertCoPx;
import com.example.gcalc.Calculator.HandleStack;
import com.example.gcalc.Calculator.Main;
import javafx.application.Application;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Group;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import java.io.IOException;
import java.text.Format;
import java.util.*;

public class GCMain extends Application {
    public static boolean isGraphingCalc = true;

    /** Main text field for calculation input */
    static TextField tf = new TextField();
    static VBox equations = new VBox();
    static Group gp = new Group();
    static Scene main = drawGraphingCalc();

    /** Main stage should be used when outside main class */
    static Stage _stage = null;

    /**
     * The main method to launch the calculator
     * run from the <code>this.main</code> class with no args
     * */
    @Override
    public void start(Stage stage) {

        _stage = stage;

        // Setting title & icon of the Stage
        stage.setTitle("Graphing Calculator");
        stage.getIcons().add(new Image(String.valueOf(GCMain.class.getResource("Images/Icon.png"))));

        // Adds the scene to the stage
        stage.setScene(main);

        // Displaying the contents of the stage
        stage.show();

        // Default accuracy is 0.01; once settings menus are
        // implemented it will be pulled from the performance
        // tab inside the graphing section.
        double accuracy = 0.01;
        tf.setOnKeyPressed( event -> {
            switch (event.getCode()) {
                case ENTER -> {
                    if (isGraphingCalc)
                    {
                        // When enter is pressed, it creates a line array
                        // which essentially acts as a node array but
                        // Has a better renderer for the user.
                        // From there it calculates the x & y pos of the
                        // point in the graph and adds a line with those
                        // positions
                        Line[] graphLine = populateGraph(graph(accuracy), tf.getText().substring(5), accuracy);
                        Text graph = new Text(tf.getText());
                        equations.getChildren().add(graph);
                        for(Line x : graphLine) gp.getChildren().add(x);
                        tf.setText("f(x)=");
                    }
                    else
                        gp.getChildren().add(addAns(Main.tfEval(tf.getText()), tf.getText()));
                }
                case P -> {
                    // In the case the p is pressed, it changes view to
                    // the physics calculator.
                    // This may be changed in future implementations
                    try {
                        ShowPhysicsCalc();
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }
            }
        } );

    }

    /** Main method */
    public static void main(String[] args){
        launch(args);
    }

    /** Builds the main line array when a graph is added to the grid.
     * @param accuracy double of 0.01d by default, modifies how smooth the line generated by the program is*/
    public static Line[] graph(double accuracy) {
        return new Line[(int)(30/accuracy)];
    }

    /**
     * Uses the provided equation and calculates where all the lines should go on the grid.
     * @param graph takes the graph method which builds a graph array based of the accuracy
     * @param accuracy double of 0.01d by default, modifies how smooth the line generated by the program is
     * @param equation String of the graph equation provided by the user
     * */
    public static Line[] populateGraph(Line[] graph, String equation, double accuracy) {
        double lastY = 0, lastX = 0;
        for(int i = 0; i < graph.length; i++) {

            //Used variables,
            // x = raw x value of the graph,
            // y = raw y value of the graph,
            // xConverted = the px value of the position of x
            // yConverted = the px value of the position of y
            double x = i*accuracy-15, y = HandleStack.evaluateGraph(equation, (i * accuracy) - 15),
                    xConverted = ConvertCoPx.convertX(x), yConverted = ConvertCoPx.convertY(y);

            // Creates the line with the calculated points
            graph[i] = new Line(lastX == 0 ? xConverted : lastX, lastY == 0 ? yConverted : lastY, xConverted, yConverted);

            lastY = yConverted; lastX = xConverted;

            // Console output for the raw values as using breakpoints takes too long depending on accuracy
            System.out.printf("(raw)(x = %s, y = %s)%n",String.format("%.2f",x),String.format("%.2f",y));

            // Visual customization for the graph
            graph[i].setStrokeWidth(2);
            graph[i].setStroke(Color.RED);
        }
        // Returns the graph array to be added to the group pane.
        return graph;
    }

    public static void ShowGraphingCalc() {
        _stage.setScene(main);
        _stage.setTitle("Graphing Calculator");
    }

    //NOTE Change a public stage rather than parse it through the methods as it can not be parsed into the controller where
    //     the methods are called.

    /** when called the physics calculator ui will be displayed*/
    public static void ShowPhysicsCalc() throws IOException {
        FXMLLoader loader = new FXMLLoader(GCMain.class.getResource("PhysicsCalc.fxml"));
        Parent PhysicsCalc = loader.load();
        _stage.setTitle("Physics Calculator");
        Scene mainCallWindow = new Scene (PhysicsCalc, 770, 406);
        _stage.setScene(mainCallWindow);
    }

    /** when called the scientific calculator ui will be displayed*/
    public static void ShowScientificCalc() throws IOException {
        FXMLLoader loader = new FXMLLoader(GCMain.class.getResource("ScientificCalc.fxml"));
        Parent ScientificCalc = loader.load();
        _stage.setTitle("Scientific Calculator");
        Scene mainCallWindow = new Scene(ScientificCalc, 200, 600);
        _stage.setScene(mainCallWindow);
    }

    /** when called the basic calculator ui will be displayed*/
    public static void ShowBasicCalc() throws IOException {
        FXMLLoader loader = new FXMLLoader(GCMain.class.getResource("BasicCalc.fxml"));
        Parent BasicCalc = loader.load();
        _stage.setTitle("Calculator");
        Scene mainCallWindow = new Scene(BasicCalc, 200, 600);
        _stage.setScene(mainCallWindow);
    }

    public static Text addAns(double ans, String eq) {
        Text text = new Text();
        text.setX(1);
        text.setText(eq + " = " + ans);
        return text;
    }

    /** Uses iteration to create a grid of lines with an obvious x and y-axis. */
    private static Scene drawGraphingCalc() {
        // DRAW BACKGROUND

        //Creating Lines
        Line[] BG_grid = new Line[48];

        //Creates the vertical lines
        for (int i = 0; i < BG_grid.length - 18; i++){
            BG_grid[i] = new Line(150 + 20 * i, 0,150 +  20 * i, 300);
            BG_grid[i].setStroke(Color.rgb(143, 147, 187));
        }

        //Creates the horizontal lines
        for(int i = 30; i < BG_grid.length -3; i++){
            BG_grid[i] = new Line(150, 10+ 20 * (i -30), 750, 10+ 20 * (i -30));
            BG_grid[i].setStroke(Color.rgb(143, 147, 187));
        }

        //Creates the specific lines and sets the stroke width
        BG_grid[45] = new Line(450, 0, 450, 300);
        BG_grid[46] = new Line(150, 150, 750, 150);
        BG_grid[45].setStrokeWidth(2);
        BG_grid[46].setStrokeWidth(2);

        //Creates separation line
        BG_grid[47] = new Line(150, 0, 150, 300);
        BG_grid[47].setStrokeWidth(3);

        //Adds the text box for input
        tf.setMaxWidth(150);
        tf.setPrefWidth(150);
        tf.setMaxHeight(50);
        tf.setPrefHeight(50);
        tf.snapPositionX(600);
        tf.setText("f(x)=");
        equations.setPrefWidth(150);
        equations.setLayoutY(50);

        gp.getChildren().add(tf);
        gp.getChildren().add(equations);
        //Creating a Group object
        for (Line line : BG_grid) gp.getChildren().add(line);

        //Creating a scene object
        return new Scene(gp, 750, 300);
    }
}